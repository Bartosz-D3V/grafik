package generator

import (
	"fmt"
	"github.com/Bartosz-D3V/grafik/common"
	"strings"
)

// TypeArg represents simplified argument in Golang AST.
// Name is the name of the argument.
// Type is type of the argument defined as string - i.e. "string", "int", "Address" etc.
type TypeArg struct {
	Name string
	Type string
}

// ExportName converts function argument name to TitleCase.
func (t TypeArg) ExportName() string {
	return strings.Title(t.Name)
}

// ExportType converts function argument type to TitleCase excluding golang primitive types.
func (t TypeArg) ExportType() TypeArg {
	const sliceTok = "[]"
	if strings.Contains(t.Type, sliceTok) {
		dim := strings.Count(t.Type, sliceTok)
		elType := strings.TrimLeft(t.Type, sliceTok)
		if isPrimitive(elType) {
			return t
		}
		return TypeArg{
			Name: t.Name,
			Type: fmt.Sprintf("%s%s", strings.Repeat(sliceTok, dim), strings.Title(elType)),
		}
	}
	if isPrimitive(t.Type) {
		return t
	}
	return TypeArg{
		Name: t.Name,
		Type: strings.Title(t.Type),
	}
}

// isPrimitive checks if passed golang type is primitive.
// It only checks golang primitives generated by evaluator.
func isPrimitive(s string) bool {
	return s == "string" || s == "int" || s == "bool"
}

// Func represents simplified Function in Golang AST.
// Name is the name of the Function.
// Args is a slice of TypeArg and represents function parameters.
// Type is a string and represents return type of the function - i.e. "string", "Address" etc.
// WrapperTypes is a slice of TypeArg and represents selection set in GraphQL operation.
// It is used to create wrapper struct containing all values in selection set.
type Func struct {
	Name         string
	Args         []TypeArg
	Type         string
	WrapperTypes []TypeField
}

// JoinArgsBy returns list of function arguments as concatenated string with name and type.
func (f Func) JoinArgsBy(s string) string {
	pArgs := make([]string, len(f.Args))
	for i, arg := range f.Args {
		tArg := arg.ExportType()
		pArgs[i] = fmt.Sprintf("%s %s", tArg.Name, common.SnakeCaseToCamelCase(tArg.Type))
	}

	return strings.Join(pArgs, s)
}

// ExportName converts name of the function to Title case.
func (f Func) ExportName() string {
	return strings.Title(f.Name)
}

// TypeField represents simplified struct field in Golang AST.
// Name is the name of the field.
// Type is type of the field defined as string - i.e. "string", "int", "Address" etc.
// JsonName is the name of the field used in `json:` tag.
type TypeField struct {
	Name     string
	Type     string
	JsonName string
}

// ExportName converts field name to TitleCase.
func (t TypeField) ExportName() string {
	return strings.Title(t.Name)
}

// ExportType converts field name to TitleCase excluding golang primitive types.
func (t TypeField) ExportType() TypeField {
	const sliceTok = "[]"
	if strings.Contains(t.Type, sliceTok) {
		dim := strings.Count(t.Type, sliceTok)
		elType := strings.TrimLeft(t.Type, sliceTok)
		if isPrimitive(elType) {
			return t
		}
		return TypeField{
			Name:     t.Name,
			Type:     fmt.Sprintf("%s%s", strings.Repeat(sliceTok, dim), strings.Title(elType)),
			JsonName: t.JsonName,
		}
	}
	if isPrimitive(t.Type) {
		return t
	}
	return TypeField{
		Name:     t.Name,
		Type:     strings.Title(t.Type),
		JsonName: t.JsonName,
	}
}

// PointerType converts TypeField to pointer type, excluding arrays/slices/maps.
func (t TypeField) PointerType() TypeField {
	if strings.Contains(t.Type, "[]") {
		return t
	}
	return TypeField{
		Name:     t.Name,
		Type:     fmt.Sprintf("*%s", t.Type),
		JsonName: t.JsonName,
	}
}

// Struct represents simplified Struct in Golang AST.
// Name is the name of the struct.
// Fields is a slice of TypeArg and represents struct fields.
type Struct struct {
	Name   string
	Fields []TypeField
}

// Enum represents simplified Enum in Golang AST.
// Name is the name of the enum.
// Fields is a slice of string and represents all possible values of the enum.
type Enum struct {
	Name   string
	Fields []string
}

// Const represents simplified constant in Golang AST.
// Name is the name of the constant.
// Val is an interface{} and represents any possible value of the struct.
type Const struct {
	Name string
	Val  interface{}
}

// IsString returns true if passed interface{} is a string.
func (c Const) IsString() bool {
	switch c.Val.(type) {
	case string:
		return true
	default:
		return false
	}
}
